    def check_if_scripts_need_update(self, cache_file: Path) -> bool:
        """Check if GitHub scripts are different from cached ones"""
        try:
            import requests
            import hashlib
            
            # Get GitHub repository info to check for changes
            repo_url = "https://api.github.com/repos/NachoPayback/sp-script-holder-1912/commits/master"
            
            self.logger.debug("Checking GitHub for script changes...")
            response = requests.get(repo_url, timeout=10)
            response.raise_for_status()
            
            github_data = response.json()
            latest_commit_sha = github_data.get('sha', '')
            
            # Check cached commit SHA
            if cache_file.exists():
                try:
                    with open(cache_file, 'r') as f:
                        cache_data = json.load(f)
                    cached_sha = cache_data.get('commit_sha', '')
                    
                    if cached_sha == latest_commit_sha:
                        self.logger.debug(f"Scripts up to date (commit: {latest_commit_sha[:8]})")
                        return False  # No update needed
                    else:
                        self.logger.debug(f"Scripts outdated (cached: {cached_sha[:8]}, latest: {latest_commit_sha[:8]})")
                        return True  # Update needed
                        
                except Exception as e:
                    self.logger.warning(f"Cache file corrupted: {e}")
                    return True  # Update needed
            else:
                self.logger.debug("No cache file found")
                return True  # Update needed
                
        except Exception as e:
            self.logger.warning(f"Could not check GitHub for updates: {e}")
            # If we can't check GitHub, update only if no local scripts exist
            scripts_dest = Path.home() / "SP-Crew-Hub-Scripts" / "scripts"
            return not (scripts_dest.exists() and any(scripts_dest.iterdir()))

    def setup_embedded_scripts(self):
        """Download scripts from GitHub repository with content-based caching"""
        try:
            self.logger.debug("Checking scripts from GitHub...")
            
            # Create working directory
            project_root.mkdir(parents=True, exist_ok=True)
